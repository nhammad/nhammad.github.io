{"ast":null,"code":"import _slicedToArray from \"/home/hammad/Desktop/nhammad.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hammad/Desktop/nhammad.github.io/src/containers/projects/Projects.js\";\nimport React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport Button from \"../../components/button/Button\";\nimport Loading from \"../loading/Loading\";\nimport { openSource, socialMediaLinks } from \"../../portfolio\";\nexport default function Projects() {\n  const GithubRepoCard = lazy(() => import('../../components/githubRepoCard/GithubRepoCard'));\n\n  const FailedLoading = () => null;\n\n  const renderLoader = () => React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  });\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        repo = _useState2[0],\n        setrepo = _useState2[1];\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `\n    }).then(result => {\n      setrepoFunction(result.data.user.pinnedItems.edges);\n      console.log(result);\n    }).catch(function (error) {\n      console.log(error);\n      setrepoFunction(\"Error\");\n      console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");\n    });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  if (!(typeof repo === 'string' || repo instanceof String)) {\n    return React.createElement(Suspense, {\n      fallback: renderLoader(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main\",\n      id: \"opensource\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"project-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Open Source Projects\"), React.createElement(\"div\", {\n      className: \"repo-cards-div-main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, repo.map((v, i) => {\n      return React.createElement(GithubRepoCard, {\n        repo: v,\n        key: v.node.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    })), React.createElement(Button, {\n      text: \"More Projects\",\n      className: \"project-button\",\n      href: \"https://github.com/nhammad\",\n      newTab: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(FailedLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  }\n}","map":{"version":3,"sources":["/home/hammad/Desktop/nhammad.github.io/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","lazy","Suspense","ApolloClient","gql","Button","Loading","openSource","socialMediaLinks","Projects","GithubRepoCard","FailedLoading","renderLoader","repo","setrepo","getRepoData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","user","pinnedItems","edges","console","log","catch","error","array","String","map","v","i","node","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport Button from \"../../components/button/Button\";\nimport Loading from \"../loading/Loading\";\nimport { openSource, socialMediaLinks } from \"../../portfolio\";\n\n\nexport default function Projects() {\n  const GithubRepoCard = lazy(() => import('../../components/githubRepoCard/GithubRepoCard'));\n  const FailedLoading = () => null ;\n  const renderLoader = () => <Loading />;\n  const [repo, setrepo] = useState([]);\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `,\n      })\n      .then((result) => {\n        setrepoFunction(result.data.user.pinnedItems.edges);\n        console.log(result);\n      })\n      .catch(function (error) {\n        console.log(error);\n        setrepoFunction(\"Error\");\n        console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n  if (!(typeof repo === 'string' || repo instanceof String)){\n  return (\n    <Suspense fallback={renderLoader()}>\n      <div className=\"main\" id=\"opensource\">\n        <h1 className=\"project-title\">Open Source Projects</h1>\n        <div className=\"repo-cards-div-main\">\n          {repo.map((v, i) => {\n            return <GithubRepoCard repo={v} key={v.node.id} />;\n          })}\n        </div>\n        <Button text={\"More Projects\"} className=\"project-button\" href=\"https://github.com/nhammad\" newTab={true} />\n      </div>\n    </Suspense>\n  );\n} else{\n    return(<FailedLoading />);\n  }\n}"]},"metadata":{},"sourceType":"module"}