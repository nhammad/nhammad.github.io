{"ast":null,"code":"import _slicedToArray from \"/home/hammad/Desktop/nhammad.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hammad/Desktop/nhammad.github.io/src/containers/projects/Projects.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\nimport Button from \"../../components/button/Button\";\nimport { openSource } from \"../../portfolio\";\nexport default function Projects() {\n  console.log(\"PROJECTS\");\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        repo = _useState2[0],\n        setrepo = _useState2[1];\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            //authorization: `Bearer ${atob(\"IDBiOWQ4M2JlNjhlMDdhMTY3YmRlYmVhZjNlMjczMTk3YmE3MmNjYjI=\")}`\n            authorization: `Bearer ${openSource.githubConvertedToken}`\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `\n    }).then(result => {\n      setrepoFunction(result.data.user.pinnedItems.edges);\n      console.log(result);\n    }).catch(function (error) {\n      console.log(error);\n      setrepoFunction(\"Error\");\n      console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");\n    });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"main\",\n    id: \"opensource\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"project-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"An Insight Into My Github\"), React.createElement(\"div\", {\n    className: \"repo-cards-div-main\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, repo.map((v, i) => {\n    return React.createElement(GithubRepoCard, {\n      repo: v,\n      key: v.node.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  })), React.createElement(Button, {\n    text: \"More Projects\",\n    className: \"project-button\",\n    href: \"https://github.com/nhammad\",\n    newTab: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/hammad/Desktop/nhammad.github.io/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","ApolloClient","gql","GithubRepoCard","Button","openSource","Projects","console","log","repo","setrepo","getRepoData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","user","pinnedItems","edges","catch","error","array","map","v","i","node","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAO,eAAP;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AADiC,oBAETT,QAAQ,CAAC,EAAD,CAFC;AAAA;AAAA,QAE1BU,IAF0B;AAAA,QAEpBC,OAFoB;;AAIjCV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASA,WAAT,GAAuB;AACrB,UAAMC,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC9BY,MAAAA,GAAG,EAAE,gCADyB;AAE9BC,MAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,UAAAA,OAAO,EAAE;AACP;AACAC,YAAAA,aAAa,EAAG,UAASb,UAAU,CAACc,oBAAqB;AAFlD;AADU,SAArB;AAOD;AAV6B,KAAjB,CAAf;AAaAP,IAAAA,MAAM,CACHQ,KADH,CACS;AACLA,MAAAA,KAAK,EAAElB,GAAI;;uBAEIG,UAAU,CAACgB,cAAe;;;;;;;;;;;;;;;;;;;;;;;;;;AAHpC,KADT,EA+BGC,IA/BH,CA+BSC,MAAD,IAAY;AAChBC,MAAAA,eAAe,CAACD,MAAM,CAACE,IAAP,CAAYC,IAAZ,CAAiBC,WAAjB,CAA6BC,KAA9B,CAAf;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ;AACD,KAlCH,EAmCGM,KAnCH,CAmCS,UAAUC,KAAV,EAAiB;AACtBvB,MAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAZ;AACAN,MAAAA,eAAe,CAAC,OAAD,CAAf;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,uGAAZ;AACD,KAvCH;AAwCD;;AAED,WAASgB,eAAT,CAAyBO,KAAzB,EAAgC;AAC9BrB,IAAAA,OAAO,CAACqB,KAAD,CAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,EAAE,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtB,IAAI,CAACuB,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,WAAO,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAED,CAAtB;AAAyB,MAAA,GAAG,EAAEA,CAAC,CAACE,IAAF,CAAOC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CAFF,EAOE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,eAAd;AAA+B,IAAA,SAAS,EAAC,gBAAzC;AAA0D,IAAA,IAAI,EAAC,4BAA/D;AAA4F,IAAA,MAAM,EAAE,IAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\nimport Button from \"../../components/button/Button\";\nimport { openSource } from \"../../portfolio\";\n\nexport default function Projects() {\n  console.log(\"PROJECTS\")\n  const [repo, setrepo] = useState([]);\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            //authorization: `Bearer ${atob(\"IDBiOWQ4M2JlNjhlMDdhMTY3YmRlYmVhZjNlMjczMTk3YmE3MmNjYjI=\")}`\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n            \n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `,\n      })\n      .then((result) => {\n        setrepoFunction(result.data.user.pinnedItems.edges);\n        console.log(result);\n      })\n      .catch(function (error) {\n        console.log(error);\n        setrepoFunction(\"Error\");\n        console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  return (\n    <div className=\"main\" id=\"opensource\">\n      <h1 className=\"project-title\">An Insight Into My Github</h1>\n      <div className=\"repo-cards-div-main\">\n        {repo.map((v, i) => {\n          return <GithubRepoCard repo={v} key={v.node.id} />;\n        })}\n      </div>\n      <Button text={\"More Projects\"} className=\"project-button\" href=\"https://github.com/nhammad\" newTab={true} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}